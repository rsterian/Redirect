<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>box</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hspeed = 0
vspeed = 0
hcollide = false
vcollide = false

///Initialize Variables
grav = 0.5;
base_grav = 0.5
hsp = 0;
vsp = 0;
jumpspeed = 7;
movespeed = 4;

accel = 0.4
speed_cap = 4

v_accel = -.003
v_speed_cap = -10

timer = 0
time_max = 500 

in_air = true

/*jump_time = 50000
delta = 10*/

hovering = false //same as launchable

//base_grav = 0.2
//grav = 0.5

show_arrow = false
show_back_arrow = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!keyboard_check(ord("D")) and !keyboard_check(ord("A")) and !in_air){
    friction = 0.4
    if(hsp &gt; 0){
        hsp -= 0.2
    } else if (hsp &lt; 0){
        hsp += 0.2
    }
} else {
    friction = 0    
}  

//full stop
if(abs(hsp) &lt;= 0.1){
    hsp = 0
}

if(distance_to_object(obj_goal) &lt; 10){
    if(instance_nearest(x, y, obj_goal).can_enter){
        hsp = 0
        vsp = 0
        show_debug_message("going to next room")
        if(room_next(room) != -1){
            room_goto(room_next(room))
        } else {
            game_end();
        }    
    }
}

//vspeed += grav
//show_debug_message(vsp)
//show_debug_message(hsp)


//Get the player's input
    //key_right = keyboard_check(ord("D"));
    //key_left = -keyboard_check(ord("A"));


//React to inputs
//move = key_left + key_right;
//hsp = move * movespeed;
/*if (vsp &lt; 10)*/ vsp += grav;


//Horizontal Collision
if (place_meeting(x+hsp,y,obj_wall))
{
    while(!place_meeting(x+sign(hsp),y,obj_wall))
    {
        x += sign(hsp);
    }
    hsp = 0;
}
x += hsp;

//Vertical Collision
if (place_meeting(x,y+vsp,obj_wall))
{
    in_air = false
    while(!place_meeting(x,y+sign(vsp),obj_wall))
    {
        y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;

//show_debug_message(grav)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(distance_to_object(obj_ball) &lt; 30){
    //show_debug_message("hey")
    inst = instance_nearest(x, y, obj_ball)
    
    if(object_get_name(inst.object_index) == "obj_blink_ball"){
        if(!inst.targetable){
            show_debug_message("untargetable!")
            grav = base_grav
            hovering = false
            show_arrow = false
            exit
        }
    }
    
    /*if(object_get_name(inst.object_index) == "obj_toggle_ball"){
        if(!inst.on){
            show_debug_message("untargetable!")
            grav = base_grav
            hovering = false
            show_arrow = false
            exit
        }
    }*/
            
    
    if(object_get_name(inst.object_index) == "obj_bf_pause_ball"){
        inst.is_held = true
    }
    
    hovering = true
    in_air = true
    
    x = inst.x - 8
    y = inst.y - 8
    
    vsp = 0
    hsp = 0
    grav = 0
    
    show_arrow = true
    if(object_get_name(inst.object_index) == "obj_movable_ball"){
        show_back_arrow = true
    }
    
} else {
    hovering = false
    show_arrow = false
    show_back_arrow = false
    grav = base_grav
    
    dist = 1
    while(place_meeting(x,y,obj_wall)){
        if(!place_meeting(x + dist, y, obj_wall)){
            x += dist
            break
        }
        if(!place_meeting(x - dist, y, obj_wall)){
            x -= dist
            break
        }
        if(!place_meeting(x, y + dist, obj_wall)){
            y += dist
            break
        }
        if(!place_meeting(x, y - dist, obj_wall)){
            y -= dist
            break
        }
        dist++
    }
}   
//show_debug_message("far")
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(hsp &lt; speed_cap){
    hsp += accel
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="65">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(hsp &gt; (-1 * speed_cap)){
    hsp -= accel
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_colour(c_white);
draw_ellipse(self.x - 50, self.y - 50, self.x + 50, self.y + 50, true);

if(show_arrow){
    _maxDistance = 50    

    _dir = point_direction(x, y, mouse_x, mouse_y)
    //_dist = min(point_distance(x, y, mouse_x, mouse_y), _maxDistance);
    _dist = 100
    
    draw_arrow(x, y, x+(dcos(_dir)*_dist), y-(dsin(_dir)*_dist), 15);
    //https://forum.yoyogames.com/index.php?threads/arrow-direction-and-length.560/
    //credit to jirrev, posted 6/23/16
        
    //draw_arrow(x, y, mouse_x, mouse_y, 10)
}

if(show_back_arrow){
    _maxDistance = 50    

    _dir = 180 + point_direction(x, y, mouse_x, mouse_y)
    //_dist = min(point_distance(x, y, mouse_x, mouse_y), _maxDistance);
    _dist = 60
    
    draw_set_color(c_orange)
    draw_arrow(x, y, x+(dcos(_dir)*_dist), y-(dsin(_dir)*_dist), 15);
    draw_set_color(c_white)
    //https://forum.yoyogames.com/index.php?threads/arrow-direction-and-length.560/
    //credit to jirrev, posted 6/23/16
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="80">
      <action>
        <libid>1</libid>
        <id>221</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_previous_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="78">
      <action>
        <libid>1</libid>
        <id>222</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_next_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(in_air = false){
    in_air = true
    while(keyboard_check(vk_space) and timer &lt; time_max){
        timer++
        vsp += -1
        if(vsp &lt; v_speed_cap){
            break
        }
    }
    
    /*while(keyboard_check(vk_space) and jump_time &gt; 0){
        vspeed = jump_time * 0.02
        jump_time -= delta
    }*/
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="8">
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="10" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(hovering){
    show_debug_message("launchable")
} else {
    show_debug_message("not launchable")
}

if(hovering){    
    grav = base_grav
    hovering = false
    
    dir = point_direction(x, y, mouse_x, mouse_y)
    //direction = dir
    //speed = 15
    
    inst = instance_nearest(x, y, obj_ball)
    if(object_get_name(inst.object_index) == "obj_movable_ball"){
        inst.direction = dir + 180
        inst.speed = 3
    }    
    if(object_get_name(inst.object_index) == "obj_bf_pause_ball"){
        inst.is_held = false
    }
    
    if(object_get_name(inst.object_index) == "obj_toggle_ball"){
        var i
        /*for(i = 0; i &lt; instance_number(obj_toggle_ball); ++i){
            inst = instance_find(obj_toggle_ball, i)
            inst.on = !(inst.on)
        }*/
        
        //Toggling walls
        purple_walls = ds_list_create()
        outlines = ds_list_create()
        
        for(i = 0; i &lt; instance_number(obj_purple_wall); ++i){
            //purple_walls[i] = instance_find(obj_purple_wall, i)
            ds_list_add(purple_walls, instance_find(obj_purple_wall, i))
        }
        for(i = 0; i &lt; instance_number(obj_wall_outline); ++i){
            //outlines[i] = instance_find(obj_wall_outline, i)
            ds_list_add(outlines, instance_find(obj_wall_outline, i))
        }
        
        for(i = 0; i &lt; ds_list_size(purple_walls); ++i){
            with(ds_list_find_value(purple_walls, i)){
                instance_change(obj_wall_outline, false)
            }
        }
        for(i = 0; i &lt; ds_list_size(outlines); ++i){
            with(ds_list_find_value(outlines, i)){
                instance_change(obj_purple_wall, false)
            }
        }
        //and Toggling balls
        balls = ds_list_create()
        olines = ds_list_create()
        
        for(i = 0; i &lt; instance_number(obj_toggle_ball); ++i){
            ds_list_add(balls, instance_find(obj_toggle_ball, i))
        }
        for(i = 0; i &lt; instance_number(obj_toggle_ball_outline); ++i){
            ds_list_add(olines, instance_find(obj_toggle_ball_outline, i))
        }
        
        for(i = 0; i &lt; ds_list_size(balls); ++i){
            with(ds_list_find_value(balls, i)){
                instance_change(obj_toggle_ball_outline, false)
            }
        }
        for(i = 0; i &lt; ds_list_size(olines); ++i){
            with(ds_list_find_value(olines, i)){
                instance_change(obj_toggle_ball, false)
            }
        }
        //Done toggling
        
    }
    
    hsp = 13 * dcos(dir)
    vsp = -13 * dsin(dir)
    show_debug_message(dir)
    show_debug_message(hsp)
    show_debug_message(vsp)
}
show_arrow = false
show_back_arrow = false

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
